spring.application.name=turtleMart

server.port=8080
server.id=A01

spring.jackson.time-zone=Asia/Seoul

## MYSQL
spring.datasource.url=jdbc:mysql://localhost:3306/turtleMart
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.sql.init.mode= always

## JPA
spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

## log
#server.error.include-message=always
#logging.level.org.springframework.web=DEBUG
#logging.level.org.springframework.security=DEBUG
#logging.level.org.springframework.transaction.interceptor=TRACE
#server.forward-headers-strategy=framework
logging.level.org.springframework=INFO

## Redis
spring.data.redis.host=host.docker.internal
spring.data.redis.port=6379

## Kafka
# kafka broker address
spring.kafka.bootstrap-servers=host.docker.internal:9092
# producer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# consumer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.group-id=autocomplete-consumer
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.properties.spring.json.trusted.packages=*
# delivery consumer
spring.kafka.consumer.delivery.group-id=delivery-group
# product inventory consumer
spring.kafka.consumer.product.inventory.group-id=product-inventory-group
# topic
kafka.topic.payment=payment-topic
kafka.topic.stock=stock-management-topic
kafka.topic.delivery=delivery-topic
kafka.topic.product=product-inventory-topic

## JWT
jwt.secret.key= bXl0dXRsZW1hcnRmdWNraW5nc2VjcmV0a2V5aXN2ZXJ5dmVyeXNlY3JldGZ1Y2tpbmdzY3JldG1vdGhlcmZ1Y2tlcg==
jwt.secret.whitelist=/auth/**
jwt.token.prefix=Bearer
jwt.token.expiration=1800000000

## Minio
minio.endpoint = http://localhost:9000
minio.access-key = minioadmin
minio.secret-key = minioadmin
minio.bucket = images

## Slack
slack.webhook.url=url

## Kakao
kakao.token=access_token
kakao.url=url

# Gmail
## Gmail 계정 아이콘 클릭 >> 계정 관리 >> '앱 비밀번호' 검색 >> 앱 비밀번호 만들기 >> 발급된 코드 password에 붙여넣기.(2단계 인증 필요)
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=지메일 주소
spring.mail.password=발급받은 코드(16자리)
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
#elasticSearch
spring.elasticsearch.uris=http://host.docker.internal:9200
spring.elasticsearch.connection-timeout=5s
spring.elasticsearch.socket-timeout=10s